# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `AtlasEngine::PostAddress`.
# Please instead update this file by running `bin/tapioca dsl AtlasEngine::PostAddress`.

class AtlasEngine::PostAddress
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::AtlasEngine::PostAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def fifth; end

    sig { returns(::AtlasEngine::PostAddress) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::AtlasEngine::PostAddress)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::AtlasEngine::PostAddress) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(T.nilable(T::Enumerator[::AtlasEngine::PostAddress]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::AtlasEngine::PostAddress]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::AtlasEngine::PostAddress]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::AtlasEngine::PostAddress)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::AtlasEngine::PostAddress) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::AtlasEngine::PostAddress) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::AtlasEngine::PostAddress) }
    def first!; end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def forty_two; end

    sig { returns(::AtlasEngine::PostAddress) }
    def forty_two!; end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def fourth; end

    sig { returns(::AtlasEngine::PostAddress) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::AtlasEngine::PostAddress) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::AtlasEngine::PostAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::AtlasEngine::PostAddress).void)
      ).returns(::AtlasEngine::PostAddress)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::AtlasEngine::PostAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::AtlasEngine::PostAddress).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def second; end

    sig { returns(::AtlasEngine::PostAddress) }
    def second!; end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def second_to_last; end

    sig { returns(::AtlasEngine::PostAddress) }
    def second_to_last!; end

    sig { returns(::AtlasEngine::PostAddress) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::AtlasEngine::PostAddress) }
    def take!; end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def third; end

    sig { returns(::AtlasEngine::PostAddress) }
    def third!; end

    sig { returns(T.nilable(::AtlasEngine::PostAddress)) }
    def third_to_last; end

    sig { returns(::AtlasEngine::PostAddress) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def building_and_unit_ranges; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def building_and_unit_ranges=(value); end

    sig { returns(T::Boolean) }
    def building_and_unit_ranges?; end

    sig { returns(T.untyped) }
    def building_and_unit_ranges_before_last_save; end

    sig { returns(T.untyped) }
    def building_and_unit_ranges_before_type_cast; end

    sig { returns(T::Boolean) }
    def building_and_unit_ranges_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def building_and_unit_ranges_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def building_and_unit_ranges_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def building_and_unit_ranges_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def building_and_unit_ranges_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def building_and_unit_ranges_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def building_and_unit_ranges_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def building_and_unit_ranges_previously_was; end

    sig { returns(T.untyped) }
    def building_and_unit_ranges_was; end

    sig { void }
    def building_and_unit_ranges_will_change!; end

    sig { returns(T.nilable(::String)) }
    def building_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def building_name=(value); end

    sig { returns(T::Boolean) }
    def building_name?; end

    sig { returns(T.nilable(::String)) }
    def building_name_before_last_save; end

    sig { returns(T.untyped) }
    def building_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def building_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def building_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def building_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def building_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def building_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def building_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def building_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def building_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def building_name_was; end

    sig { void }
    def building_name_will_change!; end

    sig { returns(T::Array[T.untyped]) }
    def city; end

    sig { params(value: T.nilable(T::Array[T.untyped])).returns(T.nilable(T::Array[T.untyped])) }
    def city=(value); end

    sig { returns(T::Boolean) }
    def city?; end

    sig { returns(T.nilable(T::Array[T.untyped])) }
    def city_before_last_save; end

    sig { returns(T.untyped) }
    def city_before_type_cast; end

    sig { returns(T::Boolean) }
    def city_came_from_user?; end

    sig { returns(T.nilable([T::Array[T.untyped], T::Array[T.untyped]])) }
    def city_change; end

    sig { returns(T.nilable([T::Array[T.untyped], T::Array[T.untyped]])) }
    def city_change_to_be_saved; end

    sig { params(from: T.nilable(T::Array[T.untyped]), to: T.nilable(T::Array[T.untyped])).returns(T::Boolean) }
    def city_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[T.untyped])) }
    def city_in_database; end

    sig { returns(T.nilable([T::Array[T.untyped], T::Array[T.untyped]])) }
    def city_previous_change; end

    sig { params(from: T.nilable(T::Array[T.untyped]), to: T.nilable(T::Array[T.untyped])).returns(T::Boolean) }
    def city_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[T.untyped])) }
    def city_previously_was; end

    sig { returns(T.nilable(T::Array[T.untyped])) }
    def city_was; end

    sig { void }
    def city_will_change!; end

    sig { returns(T.nilable(::String)) }
    def country_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def country_code=(value); end

    sig { returns(T::Boolean) }
    def country_code?; end

    sig { returns(T.nilable(::String)) }
    def country_code_before_last_save; end

    sig { returns(T.untyped) }
    def country_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def country_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def country_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def country_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def country_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def country_code_was; end

    sig { void }
    def country_code_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def latitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def latitude=(value); end

    sig { returns(T::Boolean) }
    def latitude?; end

    sig { returns(T.nilable(::Float)) }
    def latitude_before_last_save; end

    sig { returns(T.untyped) }
    def latitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def latitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def latitude_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def latitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def latitude_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def latitude_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def latitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def latitude_was; end

    sig { void }
    def latitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def locale; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.nilable(::String)) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def longitude; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def longitude=(value); end

    sig { returns(T::Boolean) }
    def longitude?; end

    sig { returns(T.nilable(::Float)) }
    def longitude_before_last_save; end

    sig { returns(T.untyped) }
    def longitude_before_type_cast; end

    sig { returns(T::Boolean) }
    def longitude_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def longitude_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def longitude_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def longitude_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def longitude_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def longitude_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def longitude_was; end

    sig { void }
    def longitude_will_change!; end

    sig { returns(T.nilable(::String)) }
    def province_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def province_code=(value); end

    sig { returns(T::Boolean) }
    def province_code?; end

    sig { returns(T.nilable(::String)) }
    def province_code_before_last_save; end

    sig { returns(T.untyped) }
    def province_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def province_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def province_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def province_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def province_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def province_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def province_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def province_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def province_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def province_code_was; end

    sig { void }
    def province_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region1; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region1=(value); end

    sig { returns(T::Boolean) }
    def region1?; end

    sig { returns(T.nilable(::String)) }
    def region1_before_last_save; end

    sig { returns(T.untyped) }
    def region1_before_type_cast; end

    sig { returns(T::Boolean) }
    def region1_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region1_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region1_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region1_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region1_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region1_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region1_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region1_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region1_was; end

    sig { void }
    def region1_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region2; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region2=(value); end

    sig { returns(T::Boolean) }
    def region2?; end

    sig { returns(T.nilable(::String)) }
    def region2_before_last_save; end

    sig { returns(T.untyped) }
    def region2_before_type_cast; end

    sig { returns(T::Boolean) }
    def region2_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region2_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region2_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region2_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region2_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region2_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region2_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region2_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region2_was; end

    sig { void }
    def region2_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region3; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region3=(value); end

    sig { returns(T::Boolean) }
    def region3?; end

    sig { returns(T.nilable(::String)) }
    def region3_before_last_save; end

    sig { returns(T.untyped) }
    def region3_before_type_cast; end

    sig { returns(T::Boolean) }
    def region3_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region3_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region3_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region3_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region3_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region3_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region3_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region3_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region3_was; end

    sig { void }
    def region3_will_change!; end

    sig { returns(T.nilable(::String)) }
    def region4; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def region4=(value); end

    sig { returns(T::Boolean) }
    def region4?; end

    sig { returns(T.nilable(::String)) }
    def region4_before_last_save; end

    sig { returns(T.untyped) }
    def region4_before_type_cast; end

    sig { returns(T::Boolean) }
    def region4_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region4_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region4_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region4_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region4_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def region4_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def region4_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def region4_previously_was; end

    sig { returns(T.nilable(::String)) }
    def region4_was; end

    sig { void }
    def region4_will_change!; end

    sig { void }
    def restore_building_and_unit_ranges!; end

    sig { void }
    def restore_building_name!; end

    sig { void }
    def restore_city!; end

    sig { void }
    def restore_country_code!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_latitude!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_longitude!; end

    sig { void }
    def restore_province_code!; end

    sig { void }
    def restore_region1!; end

    sig { void }
    def restore_region2!; end

    sig { void }
    def restore_region3!; end

    sig { void }
    def restore_region4!; end

    sig { void }
    def restore_source_id!; end

    sig { void }
    def restore_street!; end

    sig { void }
    def restore_suburb!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_zip!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_building_and_unit_ranges; end

    sig { returns(T::Boolean) }
    def saved_change_to_building_and_unit_ranges?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_building_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_building_name?; end

    sig { returns(T.nilable([T::Array[T.untyped], T::Array[T.untyped]])) }
    def saved_change_to_city; end

    sig { returns(T::Boolean) }
    def saved_change_to_city?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_country_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_country_code?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_latitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_latitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_locale?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_longitude; end

    sig { returns(T::Boolean) }
    def saved_change_to_longitude?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_province_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_province_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region1; end

    sig { returns(T::Boolean) }
    def saved_change_to_region1?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region2; end

    sig { returns(T::Boolean) }
    def saved_change_to_region2?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region3; end

    sig { returns(T::Boolean) }
    def saved_change_to_region3?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_region4; end

    sig { returns(T::Boolean) }
    def saved_change_to_region4?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_source_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_source_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_street; end

    sig { returns(T::Boolean) }
    def saved_change_to_street?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_suburb; end

    sig { returns(T::Boolean) }
    def saved_change_to_suburb?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_zip; end

    sig { returns(T::Boolean) }
    def saved_change_to_zip?; end

    sig { returns(T.nilable(::String)) }
    def source_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def source_id=(value); end

    sig { returns(T::Boolean) }
    def source_id?; end

    sig { returns(T.nilable(::String)) }
    def source_id_before_last_save; end

    sig { returns(T.untyped) }
    def source_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def source_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def source_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def source_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def source_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def source_id_was; end

    sig { void }
    def source_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def street; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def street=(value); end

    sig { returns(T::Boolean) }
    def street?; end

    sig { returns(T.nilable(::String)) }
    def street_before_last_save; end

    sig { returns(T.untyped) }
    def street_before_type_cast; end

    sig { returns(T::Boolean) }
    def street_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def street_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def street_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def street_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def street_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def street_previously_was; end

    sig { returns(T.nilable(::String)) }
    def street_was; end

    sig { void }
    def street_will_change!; end

    sig { returns(T.nilable(::String)) }
    def suburb; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def suburb=(value); end

    sig { returns(T::Boolean) }
    def suburb?; end

    sig { returns(T.nilable(::String)) }
    def suburb_before_last_save; end

    sig { returns(T.untyped) }
    def suburb_before_type_cast; end

    sig { returns(T::Boolean) }
    def suburb_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def suburb_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def suburb_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def suburb_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def suburb_previously_was; end

    sig { returns(T.nilable(::String)) }
    def suburb_was; end

    sig { void }
    def suburb_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_building_and_unit_ranges?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_building_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_city?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_country_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_latitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_longitude?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_province_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region1?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region2?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region3?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_region4?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_source_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_street?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suburb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_zip?; end

    sig { returns(T.nilable(::String)) }
    def zip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def zip=(value); end

    sig { returns(T::Boolean) }
    def zip?; end

    sig { returns(T.nilable(::String)) }
    def zip_before_last_save; end

    sig { returns(T.untyped) }
    def zip_before_type_cast; end

    sig { returns(T::Boolean) }
    def zip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zip_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zip_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def zip_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def zip_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def zip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def zip_was; end

    sig { void }
    def zip_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::AtlasEngine::PostAddress } }

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::AtlasEngine::PostAddress } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::AtlasEngine::PostAddress } }

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, Integer, String, T::Enumerable[T.any(::AtlasEngine::PostAddress, Integer, String, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(T::Array[::AtlasEngine::PostAddress])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, Integer, String, T::Enumerable[T.any(::AtlasEngine::PostAddress, Integer, String, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(T::Array[::AtlasEngine::PostAddress])
    end
    def destroy(*records); end

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def load_target; end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::AtlasEngine::PostAddress, T::Enumerable[T.any(::AtlasEngine::PostAddress, T::Enumerable[::AtlasEngine::PostAddress])])
      ).returns(T::Array[::AtlasEngine::PostAddress])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def target; end

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::AtlasEngine::PostAddress } }

    sig { returns(T::Array[::AtlasEngine::PostAddress]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::AtlasEngine::PostAddress } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
