# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-suite` gem.
# Please instead update this file by running `bin/tapioca gem minitest-suite`.

# source://minitest-suite//lib/minitest/suite/version.rb#1
module Minitest
  class << self
    # source://minitest/5.20.0/lib/minitest.rb#176
    def __run(reporter, options); end

    # source://minitest/5.20.0/lib/minitest.rb#97
    def after_run(&block); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def allow_fork; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def allow_fork=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#69
    def autorun; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def backtrace_filter; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def backtrace_filter=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#18
    def cattr_accessor(name); end

    # source://minitest/5.20.0/lib/minitest.rb#1102
    def clock_time; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def extensions; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def extensions=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#267
    def filter_backtrace(bt); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def info_signal; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def info_signal=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#101
    def init_plugins(options); end

    # source://minitest/5.20.0/lib/minitest.rb#108
    def load_plugins; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def parallel_executor; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def parallel_executor=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#189
    def process_args(args = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def reporter; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def reporter=(_arg0); end

    # source://minitest/5.20.0/lib/minitest.rb#143
    def run(args = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest.rb#1093
    def run_one_method(klass, method_name); end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def seed; end

    # source://minitest/5.20.0/lib/minitest.rb#19
    def seed=(_arg0); end
  end
end

# source://minitest-suite//lib/minitest/suite.rb#98
class Minitest::Runnable
  # source://minitest/5.20.0/lib/minitest.rb#448
  def initialize(name); end

  # source://minitest/5.20.0/lib/minitest.rb#284
  def assertions; end

  # source://minitest/5.20.0/lib/minitest.rb#284
  def assertions=(_arg0); end

  # source://minitest/5.20.0/lib/minitest.rb#444
  def failure; end

  # source://minitest/5.20.0/lib/minitest.rb#289
  def failures; end

  # source://minitest/5.20.0/lib/minitest.rb#289
  def failures=(_arg0); end

  # source://minitest/5.20.0/lib/minitest.rb#430
  def marshal_dump; end

  # source://minitest/5.20.0/lib/minitest.rb#440
  def marshal_load(ary); end

  # source://minitest/5.20.0/lib/minitest.rb#463
  def metadata; end

  # source://minitest/5.20.0/lib/minitest.rb#470
  def metadata=(_arg0); end

  # source://minitest/5.20.0/lib/minitest.rb#475
  def metadata?; end

  # source://minitest/5.20.0/lib/minitest.rb#307
  def name; end

  # source://minitest/5.20.0/lib/minitest.rb#314
  def name=(o); end

  # source://minitest/5.20.0/lib/minitest.rb#492
  def passed?; end

  # source://minitest/5.20.0/lib/minitest.rb#501
  def result_code; end

  # source://minitest/5.20.0/lib/minitest.rb#482
  def run; end

  # source://minitest/5.20.0/lib/minitest.rb#508
  def skipped?; end

  # source://minitest/5.20.0/lib/minitest.rb#294
  def time; end

  # source://minitest/5.20.0/lib/minitest.rb#294
  def time=(_arg0); end

  # source://minitest/5.20.0/lib/minitest.rb#296
  def time_it; end

  class << self
    # source://minitest/5.20.0/lib/minitest.rb#1112
    def inherited(klass); end

    # source://minitest/5.20.0/lib/minitest.rb#321
    def methods_matching(re); end

    # source://minitest/5.20.0/lib/minitest.rb#400
    def on_signal(name, action); end

    # source://minitest/5.20.0/lib/minitest.rb#325
    def reset; end

    # source://minitest/5.20.0/lib/minitest.rb#336
    def run(reporter, options = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest.rb#372
    def run_one_method(klass, method_name, reporter); end

    # source://minitest/5.20.0/lib/minitest.rb#417
    def runnable_methods; end

    # source://minitest-suite//lib/minitest/suite.rb#101
    def runnables; end

    # source://minitest/5.20.0/lib/minitest.rb#381
    def test_order; end

    # source://minitest/5.20.0/lib/minitest.rb#385
    def with_info_handler(reporter, &block); end
  end
end

# source://minitest-suite//lib/minitest/suite/version.rb#2
module Minitest::Suite
  class << self
    # source://minitest-suite//lib/minitest/suite.rb#42
    def filter_runnables(runnables); end

    # source://minitest-suite//lib/minitest/suite.rb#30
    def order; end

    # source://minitest-suite//lib/minitest/suite.rb#21
    def order=(suite_order); end

    # source://minitest-suite//lib/minitest/suite.rb#9
    def register(suite_name:, test_class:); end

    # source://minitest-suite//lib/minitest/suite.rb#58
    def registration_for(test_class); end

    # source://minitest-suite//lib/minitest/suite.rb#34
    def registrations; end

    # source://minitest-suite//lib/minitest/suite.rb#38
    def reset; end
  end
end

# source://minitest-suite//lib/minitest/suite.rb#6
class Minitest::Suite::Error < ::StandardError; end

# source://minitest-suite//lib/minitest/suite.rb#70
class Minitest::Suite::PartialArrayProxy < ::Array
  # source://minitest-suite//lib/minitest/suite.rb#84
  def reject; end

  # source://minitest-suite//lib/minitest/suite.rb#71
  def shuffle; end
end

# source://minitest-suite//lib/minitest/suite.rb#7
class Minitest::Suite::Registration < ::Struct
  # Returns the value of attribute suite
  #
  # @return [Object] the current value of suite
  def suite; end

  # Sets the attribute suite
  #
  # @param value [Object] the value to set the attribute suite to.
  # @return [Object] the newly set value
  def suite=(_); end

  # Returns the value of attribute test
  #
  # @return [Object] the current value of test
  def test; end

  # Sets the attribute test
  #
  # @param value [Object] the value to set the attribute test to.
  # @return [Object] the newly set value
  def test=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://minitest-suite//lib/minitest/suite/version.rb#3
Minitest::Suite::VERSION = T.let(T.unsafe(nil), String)

# source://minitest-suite//lib/minitest/suite.rb#92
class Minitest::Test < ::Minitest::Runnable
  # source://minitest/5.20.0/lib/minitest/test.rb#190
  def capture_exceptions; end

  # source://minitest/5.20.0/lib/minitest/test.rb#15
  def class_name; end

  # source://minitest/5.20.0/lib/minitest/test.rb#207
  def neuter_exception(e); end

  # source://minitest/5.20.0/lib/minitest/test.rb#218
  def new_exception(klass, msg, bt, kill = T.unsafe(nil)); end

  # source://minitest/5.20.0/lib/minitest/test.rb#86
  def run; end

  # source://minitest/5.20.0/lib/minitest/test.rb#200
  def sanitize_exception(e); end

  # source://minitest/5.20.0/lib/minitest/test.rb#232
  def with_info_handler(&block); end

  class << self
    # source://minitest-focus/1.4.0/lib/minitest/focus.rb#10
    def add_to_filter(name); end

    # source://minitest-focus/1.4.0/lib/minitest/focus.rb#14
    def filtered_names; end

    # source://minitest-focus/1.4.0/lib/minitest/focus.rb#40
    def focus(name = T.unsafe(nil)); end

    # source://minitest/5.20.0/lib/minitest/test.rb#35
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.20.0/lib/minitest/test.rb#26
    def io_lock; end

    # source://minitest/5.20.0/lib/minitest/test.rb#26
    def io_lock=(_arg0); end

    # source://minitest/5.20.0/lib/minitest/test.rb#48
    def make_my_diffs_pretty!; end

    # source://minitest/5.20.0/lib/minitest/test.rb#59
    def parallelize_me!; end

    # source://minitest/5.20.0/lib/minitest/test.rb#69
    def runnable_methods; end

    # source://minitest-focus/1.4.0/lib/minitest/focus.rb#52
    def set_focus_trap; end

    # source://minitest-suite//lib/minitest/suite.rb#93
    def suite(suite_name); end
  end
end
